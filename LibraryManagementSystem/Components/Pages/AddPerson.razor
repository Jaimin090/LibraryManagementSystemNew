@page "/addPerson"

@using LibraryManagementSystem.DatabaseManager;
@using LibraryManagementSystem.Exceptions
@using LibraryManagementSystem.Models.Users;
@using LibraryManagementSystem.Models.Interfaces;
@using LibraryManagementSystem.Models;
@using LibraryManagementSystem.Models.Items;

<div>
    @if (MauiProgram.currUser is Admin)
    {
        @if (displayUsers.Count > 0)
        {
            <h4>Users</h4>

            <div style="display: flex; justify-content: space-evenly; align-content: center; margin-bottom:0">
                <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">Id</p>
                <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">
                    First Name
                </p>
                <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">Last Name</p>
                <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">User Type</p>
                <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">Action</p>

            </div>
            @foreach (User user in displayUsers)
            {
                string userType = user switch
                {
                    Patron => "Patron",
                    Owner => "Owner",
                    Librarian => "Librarian",
                    _ => ""
                };

                <div style="display: flex; justify-content: space-evenly; align-content: center; margin-top:0">
                    <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">
                        @user.Id
                    </p>
                    <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">
                        @user.FirstName
                    </p>
                    <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">
                        @user.LastName
                    </p>
                    <p style="border: 1px solid black; flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">
                        @userType
                    </p>
                    <p style="flex-grow: 1; text-align: center; flex-basis:0; margin-block:0">
                        <button style="display: block; width: 100%; color: red" @onclick="() => RemoveUser(user)">
                            Remove
                        </button>
                    </p>


                </div>
            }
            <div style="margin-top: 40px;">
                <h3>Add Patron</h3>
                <div>
                    <label>First Name:</label>
                    <input type="text" @bind="firstNamePatron" />
                    <p style="font-size: 18px; color: red;">@errFirstName</p>
                </div>
                <div>
                    <label>Last Name:</label>
                    <input type="text" @bind="lastNamePatron" />
                    <p style="font-size: 18px; color: red;">@errLastName</p>
                </div>
                <div>
                    <label>Email:</label>
                    <input type="email" @bind="email" />
                    <p style="font-size: 18px; color: red;">@errEmail</p>
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" @bind="pwd" />
                    <p style="font-size: 18px; color: red;">@errPwd</p>
                </div>
                <button @onclick="AddPatron">Add Patron</button>
            </div>
        }
        else
        {
            <h6>Empty</h6>
        }
    }

    else
    {
        <h3 style="text-align: center;">Sorry, you don't have access to this page.</h3>
    }
</div>

@if (MauiProgram.currUser is Owner)
{
    <div style="margin-top: 40px;">
        <h3>Add Librarian</h3>
        <div>
            <label>First Name:</label>
            <input type="text" @bind="firstNameLibrarian" />
            <p style="font-size: 18px; color: red;">@errFirstName</p>
        </div>
        <div>
            <label>Last Name:</label>
            <input type="text" @bind="lastNameLibrarian" />
            <p style="font-size: 18px; color: red;">@errLastName</p>
        </div>
        <button @onclick="AddLibrarian">Add Librarian</button>
    </div>
}

@code {
    private string? firstNameLibrarian, lastNameLibrarian, lastNamePatron, firstNamePatron, email, pwd;
    private string? errFirstName, errLastName, errEmail, errPwd;

    private List<User> users = UsersManagement.users;
    private List<User> displayUsers = [];

    protected override void OnInitialized()
    {
        displayUsers = MauiProgram.currUser is Librarian ? users.Where(u => u is Patron).ToList() : users;
    }

    // Get the biggest userid from users list, add 1 to it, then add a new patron with the corresponding information
    private void AddPatron()
    {
        try
        {
            errFirstName = string.Empty;
            errLastName = string.Empty;
            errEmail = string.Empty;
            errPwd = string.Empty;

            if (string.IsNullOrEmpty(firstNamePatron)) throw new EmptyInputError("First name");
            if (string.IsNullOrEmpty(lastNamePatron)) throw new EmptyInputError("Last name");
            if (string.IsNullOrEmpty(email)) throw new EmptyInputError("Email");
            if (string.IsNullOrEmpty(pwd)) throw new EmptyInputError("Password"); int id = users.OrderByDescending(u =>
            u.Id).First().Id + 1;
            Patron patron = new Patron(id, firstNamePatron!, lastNamePatron!, email!, pwd!);

            UsersManagement.AddUser(patron);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            if (msg.StartsWith("First")) errFirstName = msg;
            if (msg.StartsWith("Last")) errLastName = msg;
            if (msg.StartsWith("Email")) errEmail = msg;
            if (msg.StartsWith("Password")) errPwd = msg;

        }
    }

    private void AddLibrarian()
    {
        try
        {
            errFirstName = string.Empty;
            errLastName = string.Empty;
            errEmail = string.Empty;
            errPwd = string.Empty;

            if (string.IsNullOrEmpty(firstNameLibrarian)) throw new EmptyInputError("First name");
            if (string.IsNullOrEmpty(lastNameLibrarian)) throw new EmptyInputError("Last name");
            if (string.IsNullOrEmpty(email)) throw new EmptyInputError("Email");
            if (string.IsNullOrEmpty(pwd)) throw new EmptyInputError("Password"); if (MauiProgram.currUser is Owner)
            {

                int id = users.OrderByDescending(u => u.Id).First().Id + 1;

                Librarian librarian = new Librarian(id, firstNameLibrarian!, lastNameLibrarian!, email!, pwd!);

                UsersManagement.AddUser(librarian);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            if (msg.StartsWith("First")) errFirstName = msg;
            if (msg.StartsWith("Last")) errLastName = msg;
            if (msg.StartsWith("Email")) errEmail = msg;
            if (msg.StartsWith("Password")) errPwd = msg;
        }
    }

    private void RemoveUser(User target)
    {
        if (target is Owner) return;

        if (MauiProgram.currUser is Owner)
        {
            UsersManagement.RemoveUser(target);
            return;
        }

        if (target is Patron patron) UsersManagement.RemoveUser(patron);
    }
}