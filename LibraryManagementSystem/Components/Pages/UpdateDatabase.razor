@page "/updateDatabase"
@using LibraryManagementSystem.DatabaseManager
@using LibraryManagementSystem.Models.Items
@using LibraryManagementSystem.Models.Users
@using Npgsql

@if (MauiProgram.currUser is Admin) {
    <h3>@status</h3>
    <button @onclick="Update">Update database</button>
}
else
{
    <h3 style="text-align: center;">Sorry, you don't have access to this page.</h3>
}

@code {
    private string status = "Not updated";

/*
* Delete all items in the tables, then add new data to update.
*/
    private async Task Update()
    {
        try
        {
            await DeleteAll();
            await InsertBooks();
            await InsertGames();
            await InsertDVDs();
            await InsertUsers();
            status = "Updated";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            status = ex.Message;
            StateHasChanged();
        }

    }
    
    private async Task DeleteAll() {
        string query = $"DELETE FROM \"Users\";";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    await command.ExecuteScalarAsync();
                }

                query = $"DELETE FROM \"Games\";";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    await command.ExecuteScalarAsync();
                }

                query = $"DELETE FROM \"DvDs\";";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    await command.ExecuteScalarAsync();
                }

                query = $"DELETE FROM \"Books\";";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    await command.ExecuteScalarAsync();
                }

                  query = $"DELETE FROM \"Items\";";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    await command.ExecuteScalarAsync();
                }
    }

    private async Task InsertGames()
    {
        try
        {
            foreach (Game game in LibraryItemsManager.Games)
            {
                string query = "INSERT INTO \"Items\" (borrowed) VALUES (false) RETURNING id;";
                int insertedId = 0;

                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {
                    insertedId = (int)await command.ExecuteScalarAsync();
                }

                query = $"INSERT INTO \"Games\" (name, itemid) VALUES ('{game.Name}', {insertedId}) RETURNING id;";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {
                    insertedId = (int)await command.ExecuteScalarAsync();
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task InsertBooks()
    {
        try
        {

            foreach (Book book in LibraryItemsManager.Books)
            {
                int insertedId = 0;
                string query;

                if (book.IsAvailable)
                {
                    query = "INSERT INTO \"Items\" (borrowed) VALUES (false) RETURNING id;";

                    using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                    {

                        insertedId = (int)await command.ExecuteScalarAsync();
                    }
                }
                else
                {
                    query = "INSERT INTO \"Items\" (borrowed, borrowdate, userid, returndate) VALUES (true, @borrowdate, @userid, @returndate) RETURNING id;";

                    using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                    {
                        command.Parameters.AddWithValue("@borrowdate", book.BorrowDate);
                        command.Parameters.AddWithValue("@userid", book.Borrower.Id);
                        command.Parameters.AddWithValue("@returndate", book.ReturnDate);

                        insertedId = (int)await command.ExecuteScalarAsync();

                    }
                }

                query = $"INSERT INTO \"Books\" (itemid, title, author) VALUES ({insertedId}, '{book.Title}', '{book.Author}');";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    await command.ExecuteScalarAsync();
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task InsertDVDs()
    {
        foreach (DVD dvd in LibraryItemsManager.Dvds)
        {
            int insertedId = 0;
            string query;

            if (dvd.IsAvailable)
            {
                query = "INSERT INTO \"Items\" (borrowed) VALUES (false) RETURNING id;";

                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    insertedId = (int)await command.ExecuteScalarAsync();
                }
            }
            else
            {
                query = "INSERT INTO \"Items\" (borrowed, borrowdate, userid, returndate) VALUES (true, @borrowdate, @userid, @returndate) RETURNING id;";

                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {
                    command.Parameters.AddWithValue("@borrowdate", dvd.BorrowDate);
                    command.Parameters.AddWithValue("@userid", dvd.Borrower.Id);
                    command.Parameters.AddWithValue("@returndate", dvd.ReturnDate);

                    insertedId = (int)await command.ExecuteScalarAsync();

                }
            }

            try
            {

                query = $"INSERT INTO \"DvDs\" (title, director, itemid) VALUES ('{dvd.Title}', '{dvd.Director}', {insertedId});";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    await command.ExecuteScalarAsync();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        }

         private async Task InsertUsers()
    {
        foreach (User user in UsersManagement.users)
        {
            try
            {

                int userType = 3;
                
                if (user is Owner) userType = 1;
                else if (user is Librarian) userType = 2;

                string query = $"INSERT INTO \"Users\" (firstname, lastname, usertype, email, password) VALUES ('{user.FirstName}', '{user.LastName}', {userType}, '{user.Email}', '{user.Password}');";
                using (var command = new NpgsqlCommand(query, MauiProgram.connection))
                {

                    await command.ExecuteScalarAsync();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
