@page "/return"
@using LibraryManagementSystem.DatabaseManager
@using LibraryManagementSystem.Exceptions
@using LibraryManagementSystem.Models.Interfaces
@using LibraryManagementSystem.Models.Users
@using LibraryManagementSystem.Models;
@using LibraryManagementSystem.Models.Items;

<div>
    <h2>Return item</h2>

    <div style="display: flex; flex-direction: column; gap: 10px;">


        <div>
            <label>Item id: </label>
            <input @bind="itemId" min="1" type="number" />
            <button @onclick="ContinueFromItemIdInput">Continue</button>

            @if (!string.IsNullOrEmpty(rentalInfo))
            {
                <p style="font-size: 20px;">@rentalInfo.ToString()</p>

                <input type="date" @bind="todayDate" />

                @if (todayDate.HasValue)
                {

                    <button style="width: fit-content" @onclick="ReturnItem">Return</button>
                    <p style="font-size: 20px;">Penalty: $ @penalty</p>
                }
            }

        </div>
    </div>
    <p style="color: red; font-size: 18px;">@err</p>

</div>

@code {
    private int? itemId;
    private string? rentalInfo = "";
    private string? err;
    private static ILibraryItem? item;
    private double? penalty;
    private DateTime? todayDate;

    private void ContinueFromItemIdInput()
    {
        try
        {
            if (!itemId.HasValue) throw new EmptyInputError("Item ID");
            if (!todayDate.HasValue) throw new EmptyInputError("Date");
           
            ILibraryItem? item = LibraryItemsManager.GetItem(itemId.Value);

            if (item is IBorrowable libItem)
            {
                if (!libItem.IsAvailable)
                    {
                        if (item is Book book) rentalInfo = $"{book.Borrower!.FirstName} {book.Borrower.LastName} borrowed {book.Title}";
                        else if (item is DVD dvd) rentalInfo = $"{dvd.Borrower!.FirstName} {dvd.Borrower.LastName} borrowed {dvd.Title} at {dvd.BorrowDate.Value.ToShortDateString()}. Due at {dvd.ReturnDate.Value.ToShortDateString()}";
                    }
                    else
                    {
                        err = "Item is not borrowed";
                    }
                }
        }
        catch (Exception ex)
        {
            err = ex.Message;
        }
    }

    private void ReturnItem()
    {
        penalty = LibraryItemsManager.HandleReturn(itemId.Value, todayDate.Value);
    }
}